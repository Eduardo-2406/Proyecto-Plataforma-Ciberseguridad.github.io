rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Función para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función para verificar si el usuario es administrador
    function isAdmin() {
      return isAuthenticated() && 
        (request.auth.token.admin == true || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Reglas para la colección de usuarios
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update, delete: if isAdmin() || request.auth.uid == userId;
      
      // Subcolecciones de usuarios
      match /evaluations/{evaluationId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
      
      match /certificates/{certificateId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }
    
    // Reglas para la colección de evaluaciones
    match /evaluations/{evaluationId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (
          request.resource.data.userId == request.auth.uid ||
          resource.data.userId == request.auth.uid
        );
    }
    
    // Reglas para la colección de invitaciones
    match /invitations/{invitationId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Reglas para otras colecciones
    match /{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
} 